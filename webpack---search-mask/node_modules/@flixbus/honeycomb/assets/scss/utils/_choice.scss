// ------------------------------------
// choice field utilities
// ------------------------------------
/// @access private
// ------------------------------------

@import '../config/all';

// ------------------------------------
// style variables
// ------------------------------------
$choice-sizes: (sm: 18px, md: 30px);

// ------------------------------------
// basic-choice
// ------------------------------------
// defines basic choice form elements styles
// ------------------------------------
@mixin basic-choice (
  $checkmark,
  $checkmark-sizes,
  $border-radius: cssvar(primary-border-radius)
) {
  position: relative;

  @each $size, $value in $choice-sizes {
    // md is our default size, no-modifier needed
    @if $size == 'md' {
      &__label {
        display: inline-flex;
        align-items: center; // keeps text oneliners centered with the checkbox
        min-height: $value; // matches checkbox height
        color: cssvar(primary-content-color);
        font-family: inherit;
        cursor: pointer;

        &::before {
          display: block;
          flex-shrink: 0;
          align-self: baseline;
          width: $value;
          height: $value;
          margin-right: cssvar(spacing-xs);
          transition: ease-in-out 200ms background-size;
          border: 2px solid cssvar(input-border-color);
          border-radius: $border-radius;
          background: $checkmark no-repeat center;
          background-size: 0;
          content: '';
        }
      }

      &__input:checked + &__label::before {
        background-size: map-get($map: $checkmark-sizes, $key: md);
      }
    } @else {
      &--#{$size} &__label {
        min-height: $value; // matches checkbox height

        &::before {
          width: $value;
          height: $value;
        }
      }

      &--#{$size} &__input:checked + &__label::before {
        background-size: map-get($map: $checkmark-sizes, $key: sm);
      }
    }
  }

  &__input {
    position: absolute;
    opacity: 0;
  }

  &__input:focus + &__label::before {
    @include input-outline;
  }

  // coloring for checked state
  &__input:checked + &__label::before {
    border-color: cssvar(primary-ui-color);
  }

  &__info {
    @include show-as-small-text();
    display: block;
    padding-top: cssvar(spacing-xxxs);
  }

  // disabled state, same logic as for other inputs in here
  &--disabled &__label {
    cursor: not-allowed;
    opacity: cssvar(disabled-element-opacity);
  }

  &--error &__label:before {
    border-color: cssvar(danger-color);
  }

  &--error &__info {
    color: cssvar(input-error-info-color);
  }
}
