// ----------------------------------------------
// Input (text) (.[prefix-]input)
// ----------------------------------------------

@import '../config/all';
@import '../utils/all';

#{$config-class-prefix} {
  &input {
    position: relative;

    @include input-states();
    @include input-info-text();
    @include input-decorations;

    &__field {
      @include input-basic;

      #{$config-class-prefix}input--valid & {
        padding-right: 40px;
      }

      #{$config-class-prefix}input--error & {
        padding-right: 40px;
        border: 1px solid cssvar(input-error-border-color);
      }

      #{$config-class-prefix}input--active &,
      &:focus {
        border: 1px solid cssvar(input-active-border-color);
        outline: none;
      }

      #{$config-class-prefix}input--disabled & {
        cursor: not-allowed;
      }

      #{$config-class-prefix}input--has-icon & {
        padding-left: 40px;
      }

      #{$config-class-prefix}input--loading & {
        padding-right: cssvar(spacing-lg);
      }
    }

    // we need to increase the specificity in here to make sure order of CSS partials loaded doesn't influence the layout,
    // this is needed for Honeycomb-react where partials order is unpredictable
    // @todo figure out the better way of ensuring the order doesn't influence the result
    & &__icon {
      display: block;
      position: absolute;
      left: cssvar(spacing-xs);
      margin-top: calc(-1 * #{cssvar(input-height-mobile)} / 2);
      transform: translateY(-50%);
      z-index: z(form-label) + 1;
      pointer-events: none;

      @include on-bp(xl) {
        margin-top: calc(-1 * #{cssvar(input-height-desktop)} / 2);
      }

      &::before {
        margin-left: 0;
      }
    }

    &__spinner {
      display: block;
      position: absolute;
      right: cssvar(spacing-xs);
      margin-top: calc(-1 * #{cssvar(input-height-mobile)} / 2 - #{cssvar(spacing-xs)});
      z-index: z(form-label) + 1;

      @include on-bp(xl) {
        margin-top: calc(-1 * #{cssvar(input-height-desktop)} / 2 - #{cssvar(spacing-xs)});
      }

    }

    // inline-label variation
    &--has-inline-label {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }

    &--has-inline-label &__label {
      flex-basis: 100%;
      order: 0;
    }

    &__inline-label {
      @include input-basic;

      display: flex;
      align-items: center;
      order: 1;
      width: auto;
      border-radius: cssvar(input-border-radius) 0 0 cssvar(input-border-radius);

      #{$config-class-prefix}input--active &,
      #{$config-class-prefix}input__field:focus ~ & {
        border-color: cssvar(input-active-border-color);
        border-right-color: cssvar(input-border-color);
      }

      #{$config-class-prefix}input--error & {
        border-color: cssvar(input-error-border-color);
        border-right-color: cssvar(input-border-color);
      }
    }

    &--has-inline-label &__icon {
      position: static;
      order: 2;
      // negative margin to the icon to move the field to the left and overlap it,
      // the -1px is to compensate for the border
      margin: 0 calc(1px - #{cssvar(spacing-sm)}) 0 0;
      transform: translate(cssvar(spacing-xs), 0);
    }

    &--has-inline-label &__field {
      flex: 1;
      order: 3;
      min-width: 0;
      border-left: 0;
      border-radius: 0 cssvar(input-border-radius) cssvar(input-border-radius) 0;
    }

    &--has-inline-label &__info {
      flex-basis: 100%;
      order: 4;
    }
  }

  // overwrite display of spinner component
  &input &input__spinner {
    display: block;
  }
}
