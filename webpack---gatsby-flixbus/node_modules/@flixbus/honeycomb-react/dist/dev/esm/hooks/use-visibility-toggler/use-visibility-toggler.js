import {
    slicedToArray as _slicedToArray
} from '../../_virtual/_rollupPluginBabelHelpers.js';
import {
    useState,
    useEffect
} from 'react';
/**
 * custom visibility toggling hook,
 * triggers active state depending on either click or mouse hover events
 * @param initialActive
 * @param onToggle
 * @param triggerOnHover
 * @param content
 * @returns {[boolean, *, function(): void]}
 */

var useVisibilityToggler = function useVisibilityToggler(initialActive, onToggle) {
    var triggerOnHover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var content = arguments.length > 3 ? arguments[3] : undefined;

    var _useState = useState(initialActive),
        _useState2 = _slicedToArray(_useState, 2),
        isActive = _useState2[0],
        setIsActive = _useState2[1];

    useEffect(function() {
        setIsActive(initialActive);
    }, [initialActive]);
    useEffect(function() {
        if (onToggle) {
            // for consistency in controlled behaviour onToggle accepts the prop value instead of state
            // @todo deprecate that for 3.0
            onToggle(initialActive === null ? isActive : initialActive);
        }
    }, [isActive || initialActive]);

    var activate = function activate() {
        return setIsActive(true);
    };

    var deactivate = function deactivate() {
        return setIsActive(false);
    };

    var toggle = function toggle() {
        return setIsActive(!isActive);
    };

    var handleActivation = function handleActivation(event) {
        // preventDefault to avoid page scrolling when space bar is used to activate the target
        event.preventDefault();
        toggle();
    };

    var handleKeyDown = function handleKeyDown(event) {
        if (event.key === 'Enter' || event.key === ' ') {
            handleActivation(event);
        }

        if (event.key === 'Escape') {
            deactivate();
        }
    };

    var CLICK_EVENTS = {
        onKeyDown: handleKeyDown,
        onClick: handleActivation
    };
    var HOVER_EVENTS = {
        onMouseEnter: activate,
        onMouseLeave: function onMouseLeave(e) {
            return content && !content.contains(e.relatedTarget) && deactivate();
        },
        onFocus: activate,
        onBlur: function onBlur(e) {
            return content && !content.contains(e.relatedTarget) && deactivate();
        }
    };
    var getHandlers = triggerOnHover ? HOVER_EVENTS : CLICK_EVENTS;
    return [isActive, getHandlers, deactivate];
};

export default useVisibilityToggler;
export {
    useVisibilityToggler
};