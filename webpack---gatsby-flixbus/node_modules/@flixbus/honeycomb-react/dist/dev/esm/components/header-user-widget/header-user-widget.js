import {
    objectSpread2 as _objectSpread2,
    typeof as _typeof,
    extends as _extends
} from '../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import styles from '../header/header2.js';
import HoneyBem from '../../packages/honey-bem/honey-bem.js';
import {
    HeaderNavigationPropTypes
} from '../header/quarks/header-navigation/header-navigation-proptypes.js';
import Avatar from '../avatar/avatar.js';
import {
    HeaderNavigation
} from '../header/quarks/header-navigation/header-navigation.js';
import {
    IconProfile
} from '../icons/inline/icon-profile.js';
var bem = HoneyBem('header-user-widget', styles);

var HeaderUserWidget = function HeaderUserWidget(_ref) {
    var alt = _ref.alt,
        children = _ref.children,
        extraClasses = _ref.extraClasses,
        navigation = _ref.navigation,
        src = _ref.src,
        text = _ref.text,
        url = _ref.url; // @todo simplify this possibly when 'as' props are unified among components
    // customizing Avatar props depending on if RouterLink passed

    var avatarProps = url && url.RouterLink ? _objectSpread2({
        as: url.RouterLink
    }, url) : {
        url: url
    };
    delete avatarProps.RouterLink; // removes redundant RouterLink prop as Avatar accepts "as"
    // if custom RouterLink component passed
    // change object structure of nav item being passed to HeaderNavigation accordingly

    var userProfileNavItem = url && _typeof(url) === 'object' && url.RouterLink ? _objectSpread2({
        content: text
    }, url) : {
        href: url,
        content: text
    }; // assembling navigation array for HeaderNavigation component,
    // if navigation is passed we remove the link from username text

    var userProfileNav = navigation && navigation.length ? [{
        content: text,
        children: navigation
    }] : [userProfileNavItem];
    return /*#__PURE__*/ React.createElement("div", {
        className: bem.b(false, extraClasses)
    }, /*#__PURE__*/ React.createElement(Avatar, _extends({}, avatarProps, {
        src: src,
        alt: alt,
        extraClasses: bem.e('picture')
    }), children), /*#__PURE__*/ React.createElement("div", {
        className: bem.e('content')
    }, /*#__PURE__*/ React.createElement(HeaderNavigation, {
        "aria-label": text,
        navigation: userProfileNav
    })));
};

HeaderUserWidget.displayName = 'HeaderUserWidget';
HeaderUserWidget.defaultProps = {
    alt: '',
    children: /*#__PURE__*/ React.createElement(IconProfile, {
        style: {
            fill: 'white'
        }
    }),
    // header needs white version of the icon
    extraClasses: '',
    src: ''
};
export default HeaderUserWidget;
export {
    HeaderUserWidget
};