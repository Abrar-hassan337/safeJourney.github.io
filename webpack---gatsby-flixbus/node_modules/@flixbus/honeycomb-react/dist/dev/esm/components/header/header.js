import {
    objectSpread2 as _objectSpread2
} from '../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import styles from './header2.js';
import HoneyBem from '../../packages/honey-bem/honey-bem.js';
import {
    HeaderBrandPropTypes
} from './quarks/header-brand/header-brand-proptypes.js';
import {
    HeaderNavigationPropTypes
} from './quarks/header-navigation/header-navigation-proptypes.js';
import {
    HeaderBrand
} from './quarks/header-brand/header-brand.js';
import {
    HeaderNavigation
} from './quarks/header-navigation/header-navigation.js';
import {
    Injecss
} from '../../packages/injecss/injecss.js';
import Icon from '../icon/icon.js';
import {
    IconBurger
} from '../icons/inline/icon-burger.js';
import Overlay from '../overlay/overlay.js';
var bem = HoneyBem('header', styles);
var bemToggler = HoneyBem('header-nav-toggle', styles);
var bemNavWrapper = HoneyBem('header-nav-wrapper', styles);
var bemWidget = HoneyBem('header-widgets', styles);

var Header = function Header(_ref) {
    var extraClasses = _ref.extraClasses,
        brand = _ref.brand,
        fixed = _ref.fixed,
        fullwidth = _ref.fullwidth,
        menuVisible = _ref.menuVisible,
        navigation = _ref.navigation,
        toggleMenu = _ref.toggleMenu,
        toggleMenuBtnLabel = _ref.toggleMenuBtnLabel,
        navigationLabel = _ref.navigationLabel,
        mobileWidget = _ref.mobileWidget,
        widget = _ref.widget,
        stickyWidget = _ref.stickyWidget,
        onOverlayClick = _ref.onOverlayClick;
    return (
        /*#__PURE__*/
        // forcing header to become fixed if mobile side menu is visible,
        // preventing menu control scrolling out of view
        React.createElement("header", {
            className: bem.b({
                unfixed: !fixed && !menuVisible,
                fullwidth: fullwidth
            }, extraClasses)
        }, /*#__PURE__*/ React.createElement("div", {
            className: bem.e('inner')
        }, (navigation.length >= 1 || widget || mobileWidget) && /*#__PURE__*/ React.createElement("button", {
            "aria-label": toggleMenuBtnLabel,
            onClick: toggleMenu,
            type: "button",
            className: bemToggler.b()
        }, /*#__PURE__*/ React.createElement(Icon, {
            InlineIcon: IconBurger,
            "aria-hidden": "true"
        })), /*#__PURE__*/ React.createElement(HeaderBrand, brand), /*#__PURE__*/ React.createElement("div", {
            className: HoneyBem('header-navbar', styles).b()
        }, (navigation.length >= 1 || widget || mobileWidget) && /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement("div", {
            className: menuVisible ? bemNavWrapper.b('visible') : bemNavWrapper.b()
        }, navigation.length > 0 && /*#__PURE__*/ React.createElement(HeaderNavigation, {
            navigation: navigation,
            "aria-label": navigationLabel
        }), widget && !stickyWidget && /*#__PURE__*/ React.createElement("div", {
            className: bemWidget.b('mobile')
        }, widget), mobileWidget && /*#__PURE__*/ React.createElement("div", {
            className: bemWidget.b('mobile')
        }, mobileWidget)), /*#__PURE__*/ React.createElement(Overlay, {
            onClick: onOverlayClick,
            extraClasses: HoneyBem('header-navbar', styles).e('overlay')
        }))), widget && /*#__PURE__*/ React.createElement("div", {
            className: stickyWidget ? bemWidget.b('sticky') : bemWidget.b()
        }, widget)))
    );
};

Header.displayName = 'Header';
Header.defaultProps = {
    extraClasses: '',
    navigation: [],
    toggleMenu: function toggleMenu() {},
    toggleMenuBtnLabel: null,
    navigationLabel: null,
    menuVisible: false,
    onOverlayClick: null,
    mobileWidget: false,
    widget: false,
    fixed: true,
    fullwidth: false,
    stickyWidget: false
};
var header = Injecss(Header, styles);
export default header;
export {
    Header
};