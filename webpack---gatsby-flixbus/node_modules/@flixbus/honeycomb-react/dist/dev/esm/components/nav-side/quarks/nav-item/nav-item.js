import {
    objectWithoutProperties as _objectWithoutProperties,
    slicedToArray as _slicedToArray,
    objectSpread2 as _objectSpread2,
    extends as _extends
} from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React, {
    useRef
} from 'react';
import {
    InlineIconPropType
} from '../../../../hooks/use-inline-icon/inline-icon-proptype.js';
import {
    Injecss
} from '../../../../packages/injecss/injecss.js';
import useInlineIcon from '../../../../hooks/use-inline-icon/use-inline-icon.js';
import {
    useVisibilityToggler
} from '../../../../hooks/use-visibility-toggler/use-visibility-toggler.js';
var _excluded = ["parentBem", "modifier", "href", "active", "RouterLink", "subMenu", "open", "openOnHover", "children", "InlineIcon"];

var buildLink = function buildLink(className, href, active, children, icon, rest) {
    var commonProps = _objectSpread2(_objectSpread2({
        className: className
    }, active && {
        'aria-current': true
    }), rest);

    return href ? /*#__PURE__*/ React.createElement("a", _extends({}, commonProps, {
        href: href
    }), icon, children) : /*#__PURE__*/ React.createElement("span", commonProps, icon, children);
};

var NavItem = function NavItem(_ref) {
    var parentBem = _ref.parentBem,
        modifier = _ref.modifier,
        href = _ref.href,
        active = _ref.active,
        RouterLink = _ref.RouterLink,
        subMenu = _ref.subMenu,
        open = _ref.open,
        openOnHover = _ref.openOnHover,
        children = _ref.children,
        InlineIcon = _ref.InlineIcon,
        rest = _objectWithoutProperties(_ref, _excluded);

    var subMenuRef = useRef();
    var computedInlineIcon = useInlineIcon(InlineIcon, active);

    var _useVisibilityToggler = useVisibilityToggler(open, null, openOnHover, subMenuRef.current),
        _useVisibilityToggler2 = _slicedToArray(_useVisibilityToggler, 3),
        isOpen = _useVisibilityToggler2[0],
        events = _useVisibilityToggler2[1],
        closeMenu = _useVisibilityToggler2[2];
    /** attaches target attributes and events for subMenu toggler */


    var withSubMenuProps = subMenu ? _objectSpread2({
        role: 'button',
        tabIndex: '0',
        'aria-expanded': isOpen
    }, events) : {};
    var linkClassNames = parentBem.e('link', {
        active: active,
        'has-subnav': subMenu,
        'has-subnav-open': isOpen
    });

    var closeMenuOnHover = function closeMenuOnHover() {
        return openOnHover && closeMenu();
    };

    var wrappedChildren = /*#__PURE__*/ React.createElement("span", {
        className: parentBem.e('text')
    }, children);
    var computedLink = buildLink(linkClassNames, href, active, wrappedChildren, computedInlineIcon, _objectSpread2(_objectSpread2({}, rest), withSubMenuProps));
    return /*#__PURE__*/ React.createElement("li", {
        className: parentBem.e('item', modifier)
    }, RouterLink ? /*#__PURE__*/ React.createElement(RouterLink, _extends({
        className: parentBem.e('link'),
        activeClassName: parentBem.e('link', {
            active: true
        }),
        to: href
    }, rest, withSubMenuProps), computedInlineIcon, wrappedChildren) : computedLink, subMenu && /*#__PURE__*/ React.createElement("div", {
        ref: subMenuRef,
        onMouseLeave: closeMenuOnHover,
        onBlur: closeMenuOnHover
    }, isOpen && subMenu));
};

NavItem.displayName = 'NavItem';
NavItem.defaultProps = {
    modifier: null,
    href: null,
    RouterLink: null,
    active: false,
    subMenu: null,
    open: false,
    openOnHover: false,
    InlineIcon: null
};
/**
 * @todo: implement accessible subMenu component
 * ref: https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html
 */

var NavItem$1 = Injecss(NavItem);
export default NavItem$1;