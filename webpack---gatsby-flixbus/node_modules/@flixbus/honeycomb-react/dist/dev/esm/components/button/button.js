import {
    objectWithoutProperties as _objectWithoutProperties,
    extends as _extends
} from '../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import styles from './button2.js';
import HoneyBem from '../../packages/honey-bem/honey-bem.js';
import {
    Injecss
} from '../../packages/injecss/injecss.js';
import Icon from '../icon/icon.js';
var _excluded = ["appearance", "Elem", "RouterLink", "extraClasses", "InlineIcon", "iconPosition", "iconProps", "link", "loading", "display", "type", "children"];
var bem = HoneyBem('btn', styles);

var Button = function Button(_ref) {
    var appearance = _ref.appearance,
        Elem = _ref.Elem,
        RouterLink = _ref.RouterLink,
        extraClasses = _ref.extraClasses,
        InlineIcon = _ref.InlineIcon,
        iconPosition = _ref.iconPosition,
        iconProps = _ref.iconProps,
        link = _ref.link,
        loading = _ref.loading,
        display = _ref.display,
        type = _ref.type,
        children = _ref.children,
        rest = _objectWithoutProperties(_ref, _excluded);

    var blockClass = bem.b([appearance, display, {
        link: link,
        loading: loading,
        'has-icon': InlineIcon
    }], extraClasses); // if type button nullify type prop

    var computedtype = Elem === 'button' ? type : undefined;
    var WrapperElement = RouterLink || Elem;
    var IconElement = InlineIcon && /*#__PURE__*/ React.createElement(Icon, _extends({
        extraClasses: bem.e('icon'),
        InlineIcon: InlineIcon,
        "aria-hidden": "true"
    }, iconProps));
    return /*#__PURE__*/ React.createElement(WrapperElement, _extends({
        className: blockClass,
        type: computedtype
    }, loading && {
        'aria-live': 'polite',
        'aria-busy': 'true'
    }, rest), /*#__PURE__*/ React.createElement(React.Fragment, null, iconPosition === 'left' && IconElement, InlineIcon && children ? /*#__PURE__*/ React.createElement("span", {
        className: bem.e('text')
    }, children) : /*#__PURE__*/ React.createElement(React.Fragment, null, children), iconPosition === 'right' && IconElement));
};

Button.displayName = 'Button';
Button.defaultProps = {
    appearance: null,
    display: null,
    Elem: 'button',
    RouterLink: null,
    extraClasses: '',
    InlineIcon: null,
    iconPosition: 'left',
    loading: false,
    type: 'button'
};
var Button$1 = Injecss(Button, styles);
export default Button$1;
export {
    Button
};